/// <reference types="node" />

import { Day as WeekDay } from 'date-fns';
import { CSSProperties, DOMAttributes, FunctionComponent, HTMLAttributes, JSXElementConstructor, ReactElement, SVGAttributes } from 'react';

export type Level = 0 | 1 | 2 | 3 | 4;
export interface Activity {
	date: string;
	count: number;
	level: Level;
}
export type Labels = Partial<{
	months: Array<string>;
	weekdays: Array<string>;
	totalCount: string;
	legend: Partial<{
		less: string;
		more: string;
	}>;
}>;
export type Color = string;
export type ColorScale = [
	level0: Color,
	level1: Color,
	level2: Color,
	level3: Color,
	level4: Color
];
export type ThemeInput = {
	light: ColorScale | [
		from: Color,
		to: Color
	];
	dark?: ColorScale | [
		from: Color,
		to: Color
	];
} | {
	light?: ColorScale | [
		from: Color,
		to: Color
	];
	dark: ColorScale | [
		from: Color,
		to: Color
	];
};
export interface BlockAttributes extends SVGAttributes<SVGRectElement>, HTMLAttributes<SVGRectElement> {
}
export type BlockElement = ReactElement<BlockAttributes, JSXElementConstructor<SVGRectElement>>;
export type SVGRectEventHandler = Omit<DOMAttributes<SVGRectElement>, "css" | "children" | "dangerouslySetInnerHTML">;
export type EventHandlerMap = {
	[key in keyof SVGRectEventHandler]: (...event: Parameters<NonNullable<SVGRectEventHandler[keyof SVGRectEventHandler]>>) => (activity: Activity) => void;
};
export interface Props {
	/**
	 * List of calendar entries. Every `Activity` object requires an ISO 8601 `date`
	 * property in the format `yyyy-MM-dd`, a `count` property with the amount
	 * of tracked data and finally a `level` property in the range `0 - 4` to
	 * specify activity intensity.
	 *
	 * Example object:
	 *
	 * ```json
	 * {
	 *   date: "2021-02-20",
	 *   count: 16,
	 *   level: 3
	 * }
	 * ```
	 */
	data: Array<Activity>;
	/**
	 * Margin between blocks in pixels.
	 */
	blockMargin?: number;
	/**
	 * Border radius of blocks in pixels.
	 */
	blockRadius?: number;
	/**
	 * Block size in pixels.
	 */
	blockSize?: number;
	/**
	 * Use a specific color scheme instead of the system one. Supported values
	 * are `'light'` and `'dark'`.
	 */
	colorScheme?: "light" | "dark";
	/**
	 * Event handlers to register for the SVG `<rect>` elements that are used to
	 * render the calendar days. Handler signature: `event => activity => void`
	 */
	eventHandlers?: EventHandlerMap;
	/**
	 * Font size for text in pixels.
	 */
	fontSize?: number;
	/**
	 * Toggle to hide color legend below calendar.
	 */
	hideColorLegend?: boolean;
	/**
	 * Toggle to hide month labels above calendar.
	 */
	hideMonthLabels?: boolean;
	/**
	 * Toggle to hide total count below calendar.
	 */
	hideTotalCount?: boolean;
	/**
	 * Localization strings for all calendar labels.
	 *
	 * `totalCount` supports the placeholders `{{count}}` and `{{year}}`.
	 */
	labels?: Labels;
	/**
	 * Toggle for loading state. `data` property will be ignored if set.
	 */
	loading?: boolean;
	/**
	 * Render prop for calendar blocks (activities). For example, useful to wrap
	 * the element with a tooltip component. Use `React.cloneElement` to pass
	 * additional props to the element if necessary.
	 */
	renderBlock?: (block: BlockElement, activity: Activity) => ReactElement;
	/**
	 * Toggle to show weekday labels left to the calendar.
	 */
	showWeekdayLabels?: boolean;
	/**
	 * Style object to pass to component container.
	 */
	style?: CSSProperties;
	/**
	 * Set the calendar colors for the `light` and `dark` system color scheme. The
	 * color scale for at least one color scheme needs to be specified. For
	 * undefined values, the default theme is selected. By default, the calendar
	 * will use the currently set system color scheme, but you can enforce a
	 * specific color scheme with the `colorScheme` prop.
	 *
	 * Define each color scale explicitly with five colors or pass exactly two
	 * colors (lowest and highest intensity) to calculate a single-hue scale.
	 * Colors can be specified in any valid CSS format.
	 *
	 * Example:
	 *
	 * ```tsx
	 * <ActivityCalendar
	 *   data={data}
	 *   theme={{
	 *     light: ['hsl(0, 0%, 92%)', 'firebrick'],
	 *     dark: ['#333', 'rgb(214, 16, 174)'],
	 *   }}
	 * />
	 * ```
	 *
	 */
	theme?: ThemeInput;
	/**
	 * Overwrite the total activity count.
	 */
	totalCount?: number;
	/**
	 * Index of day to be used as start of week. 0 represents Sunday.
	 */
	weekStart?: WeekDay;
}
declare const ActivityCalendar: FunctionComponent<Props>;
export declare const Skeleton: FunctionComponent<Omit<Props, "data">>;
declare module type {
	export interface AllLiteral {
		type: "AllLiteral";
	}
	export interface ArrayType {
		type: "ArrayType";
		elements: Type[];
	}
	export interface FieldType {
		type: "FieldType";
		key: string;
		value?: Type;
	}
	export interface FunctionType {
		type: "FunctionType";
		"this": Type;
		"new": Type;
		params: Type[];
		result: Type[];
	}
	export interface NameExpression {
		type: "NameExpression";
		name: string;
	}
	export interface NonNullableType {
		type: "NonNullableType";
		prefix: boolean;
		expression: Type;
	}
	export interface NullableLiteral {
		type: "NullableLiteral";
	}
	export interface NullableType {
		type: "NullableType";
		prefix: boolean;
		expression: Type;
	}
	export interface NullLiteral {
		type: "NullLiteral";
	}
	export interface OptionalType {
		type: "OptionalType";
		expression: Type;
	}
	export interface ParameterType {
		type: "ParameterType";
		name: string;
		expression: Type;
	}
	export interface RecordType {
		type: "RecordType";
		fields: Type[];
	}
	export interface RestType {
		type: "RestType";
		expression?: Type;
	}
	export interface TypeApplication {
		type: "TypeApplication";
		expression: Type;
		applications: Type[];
	}
	export interface UndefinedLiteral {
		type: "UndefinedLiteral";
	}
	export interface UnionType {
		type: "UnionType";
		elements: Type[];
	}
	export interface VoidLiteral {
		type: "VoidLiteral";
	}
	export function stringify(type: Type): string;
	export function parseType(src: string, options?: {
		midstream: boolean;
	}): Type;
	export function parseParamType(src: string, options?: {
		midstream: boolean;
	}): Type;
	export const Syntax: {
		NullableLiteral: "NullableLiteral";
		AllLiteral: "AllLiteral";
		NullLiteral: "NullLiteral";
		UndefinedLiteral: "UndefinedLiteral";
		VoidLiteral: "VoidLiteral";
		UnionType: "UnionType";
		ArrayType: "ArrayType";
		RecordType: "RecordType";
		FieldType: "FieldType";
		FunctionType: "FunctionType";
		ParameterType: "ParameterType";
		RestType: "RestType";
		NonNullableType: "NonNullableType";
		OptionalType: "OptionalType";
		NullableType: "NullableType";
		NameExpression: "NameExpression";
		TypeApplication: "TypeApplication";
	};
}

export {
	ActivityCalendar as default,
};

export {};
